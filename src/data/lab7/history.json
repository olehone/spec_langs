{"history": [{"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Image link", "Description", "Book subtitle", "Average rate", "Ratings count", "Preview", "Authors", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "description": "Learn how to speed up slow Python code with concurrent programming and the cutting-edge asyncio library. Use coroutines and tasks alongside async/await syntax to run code concurrently Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code Python is flexible, versatile, and easy to learn. It can also be very slow compared to lower-level languages. Python Concurrency with asyncio teaches you how to boost Python's performance by applying a variety of concurrency techniques. You'll learn how the complex-but-powerful asyncio library can achieve concurrency with just a single thread and use asyncio's APIs to run multiple web requests and database queries simultaneously. The book covers using asyncio with the entire Python concurrency landscape, including multiprocessing and multithreading. About the technology It\u2019s easy to overload standard Python and watch your programs slow to a crawl. Th e asyncio library was built to solve these problems by making it easy to divide and schedule tasks. It seamlessly handles multiple operations concurrently, leading to apps that are lightning fast and scalable. About the book Python Concurrency with asyncio introduces asynchronous, parallel, and concurrent programming through hands-on Python examples. Hard-to-grok concurrency topics are broken down into simple flowcharts that make it easy to see how your tasks are running. You\u2019ll learn how to overcome the limitations of Python using asyncio to speed up slow web servers and microservices. You\u2019ll even combine asyncio with traditional multiprocessing techniques for huge improvements to performance. What's inside Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code About the reader For intermediate Python programmers. No previous experience of concurrency required. About the author Matthew Fowler has over 15 years of software engineering experience in roles from architect to engineering director. Table of Contents 1 Getting to know asyncio 2 asyncio basics 3 A first asyncio application 4 Concurrent web requests 5 Non-blocking database drivers 6 Handling CPU-bound work 7 Handling blocking work with threads 8 Streams 9 Web applications 10 Microservices 11 Synchronization 12 Asynchronous queues 13 Managing subprocesses 14 Advanced asyncio", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=M9xdEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=M9xdEAAAQBAJ&pg=PT410&dq=Python&hl=&cd=10&source=gbs_api"}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "description": "The professional programmer\u2019s Deitel\u00ae guide to Python\u00ae with introductory artificial intelligence case studies Written for programmers with a background in another high-level language, Python for Programmers uses hands-on instruction to teach today\u2019s most compelling, leading-edge computing technologies and programming in Python\u2013one of the world\u2019s most popular and fastest-growing languages. Please read the Table of Contents diagram inside the front cover and the Preface for more details. In the context of 500+, real-world examples ranging from individual snippets to 40 large scripts and full implementation case studies, you\u2019ll use the interactive IPython interpreter with code in Jupyter Notebooks to quickly master the latest Python coding idioms. After covering Python Chapters 1-5 and a few key parts of Chapters 6-7, you\u2019ll be able to handle significant portions of the hands-on introductory AI case studies in Chapters 11-16, which are loaded with cool, powerful, contemporary examples. These include natural language processing, data mining Twitter\u00ae for sentiment analysis, cognitive computing with IBM\u00ae WatsonTM, supervised machine learning with classification and regression, unsupervised machine learning with clustering, computer vision through deep learning and convolutional neural networks, deep learning with recurrent neural networks, big data with Hadoop\u00ae, SparkTM and NoSQL databases, the Internet of Things and more. You\u2019ll also work directly or indirectly with cloud-based services, including Twitter, Google TranslateTM, IBM Watson, Microsoft\u00ae Azure\u00ae, OpenMapQuest, PubNub and more. Features 500+ hands-on, real-world, live-code examples from snippets to case studies IPython + code in Jupyter\u00ae Notebooks Library-focused: Uses Python Standard Library and data science libraries to accomplish significant tasks with minimal code Rich Python coverage: Control statements, functions, strings, files, JSON serialization, CSV, exceptions Procedural, functional-style and object-oriented programming Collections: Lists, tuples, dictionaries, sets, NumPy arrays, pandas Series & DataFrames Static, dynamic and interactive visualizations Data experiences with real-world datasets and data sources Intro to Data Science sections: AI, basic stats, simulation, animation, random variables, data wrangling, regression AI, big data and cloud data science case studies: NLP, data mining Twitter\u00ae, IBM\u00ae WatsonTM, machine learning, deep learning, computer vision, Hadoop\u00ae, SparkTM, NoSQL, IoT Open-source libraries: NumPy, pandas, Matplotlib, Seaborn, Folium, SciPy, NLTK, TextBlob, spaCy, Textatistic, Tweepy, scikit-learn\u00ae, Keras and more Accompanying code examples are available here: http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/bookreg/9780135224335/9780135224335_examples.zip. Register your product for convenient access to downloads, updates, and/or corrections as they become available. See inside book for more information.", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=LauMDwAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=LauMDwAAQBAJ&q=Python&dq=Python&hl=&cd=15&source=gbs_api"}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Authors", "Type", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "printType": "BOOK"}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "printType": "BOOK"}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Image link", "Description", "Book subtitle", "Average rate", "Ratings count", "Preview", "Authors", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "description": "Learn how to speed up slow Python code with concurrent programming and the cutting-edge asyncio library. Use coroutines and tasks alongside async/await syntax to run code concurrently Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code Python is flexible, versatile, and easy to learn. It can also be very slow compared to lower-level languages. Python Concurrency with asyncio teaches you how to boost Python's performance by applying a variety of concurrency techniques. You'll learn how the complex-but-powerful asyncio library can achieve concurrency with just a single thread and use asyncio's APIs to run multiple web requests and database queries simultaneously. The book covers using asyncio with the entire Python concurrency landscape, including multiprocessing and multithreading. About the technology It\u2019s easy to overload standard Python and watch your programs slow to a crawl. Th e asyncio library was built to solve these problems by making it easy to divide and schedule tasks. It seamlessly handles multiple operations concurrently, leading to apps that are lightning fast and scalable. About the book Python Concurrency with asyncio introduces asynchronous, parallel, and concurrent programming through hands-on Python examples. Hard-to-grok concurrency topics are broken down into simple flowcharts that make it easy to see how your tasks are running. You\u2019ll learn how to overcome the limitations of Python using asyncio to speed up slow web servers and microservices. You\u2019ll even combine asyncio with traditional multiprocessing techniques for huge improvements to performance. What's inside Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code About the reader For intermediate Python programmers. No previous experience of concurrency required. About the author Matthew Fowler has over 15 years of software engineering experience in roles from architect to engineering director. Table of Contents 1 Getting to know asyncio 2 asyncio basics 3 A first asyncio application 4 Concurrent web requests 5 Non-blocking database drivers 6 Handling CPU-bound work 7 Handling blocking work with threads 8 Streams 9 Web applications 10 Microservices 11 Synchronization 12 Asynchronous queues 13 Managing subprocesses 14 Advanced asyncio", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=M9xdEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=M9xdEAAAQBAJ&pg=PT410&dq=Python&hl=&cd=10&source=gbs_api"}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "description": "The professional programmer\u2019s Deitel\u00ae guide to Python\u00ae with introductory artificial intelligence case studies Written for programmers with a background in another high-level language, Python for Programmers uses hands-on instruction to teach today\u2019s most compelling, leading-edge computing technologies and programming in Python\u2013one of the world\u2019s most popular and fastest-growing languages. Please read the Table of Contents diagram inside the front cover and the Preface for more details. In the context of 500+, real-world examples ranging from individual snippets to 40 large scripts and full implementation case studies, you\u2019ll use the interactive IPython interpreter with code in Jupyter Notebooks to quickly master the latest Python coding idioms. After covering Python Chapters 1-5 and a few key parts of Chapters 6-7, you\u2019ll be able to handle significant portions of the hands-on introductory AI case studies in Chapters 11-16, which are loaded with cool, powerful, contemporary examples. These include natural language processing, data mining Twitter\u00ae for sentiment analysis, cognitive computing with IBM\u00ae WatsonTM, supervised machine learning with classification and regression, unsupervised machine learning with clustering, computer vision through deep learning and convolutional neural networks, deep learning with recurrent neural networks, big data with Hadoop\u00ae, SparkTM and NoSQL databases, the Internet of Things and more. You\u2019ll also work directly or indirectly with cloud-based services, including Twitter, Google TranslateTM, IBM Watson, Microsoft\u00ae Azure\u00ae, OpenMapQuest, PubNub and more. Features 500+ hands-on, real-world, live-code examples from snippets to case studies IPython + code in Jupyter\u00ae Notebooks Library-focused: Uses Python Standard Library and data science libraries to accomplish significant tasks with minimal code Rich Python coverage: Control statements, functions, strings, files, JSON serialization, CSV, exceptions Procedural, functional-style and object-oriented programming Collections: Lists, tuples, dictionaries, sets, NumPy arrays, pandas Series & DataFrames Static, dynamic and interactive visualizations Data experiences with real-world datasets and data sources Intro to Data Science sections: AI, basic stats, simulation, animation, random variables, data wrangling, regression AI, big data and cloud data science case studies: NLP, data mining Twitter\u00ae, IBM\u00ae WatsonTM, machine learning, deep learning, computer vision, Hadoop\u00ae, SparkTM, NoSQL, IoT Open-source libraries: NumPy, pandas, Matplotlib, Seaborn, Folium, SciPy, NLTK, TextBlob, spaCy, Textatistic, Tweepy, scikit-learn\u00ae, Keras and more Accompanying code examples are available here: http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/bookreg/9780135224335/9780135224335_examples.zip. Register your product for convenient access to downloads, updates, and/or corrections as they become available. See inside book for more information.", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=LauMDwAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=LauMDwAAQBAJ&q=Python&dq=Python&hl=&cd=15&source=gbs_api"}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Authors", "Type", "Categories", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "printType": "BOOK", "categories": ["Computers"]}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "printType": "BOOK", "categories": ["Computers"]}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Image link", "Description", "Book subtitle", "Average rate", "Ratings count", "Preview", "Authors", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "description": "Learn how to speed up slow Python code with concurrent programming and the cutting-edge asyncio library. Use coroutines and tasks alongside async/await syntax to run code concurrently Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code Python is flexible, versatile, and easy to learn. It can also be very slow compared to lower-level languages. Python Concurrency with asyncio teaches you how to boost Python's performance by applying a variety of concurrency techniques. You'll learn how the complex-but-powerful asyncio library can achieve concurrency with just a single thread and use asyncio's APIs to run multiple web requests and database queries simultaneously. The book covers using asyncio with the entire Python concurrency landscape, including multiprocessing and multithreading. About the technology It\u2019s easy to overload standard Python and watch your programs slow to a crawl. Th e asyncio library was built to solve these problems by making it easy to divide and schedule tasks. It seamlessly handles multiple operations concurrently, leading to apps that are lightning fast and scalable. About the book Python Concurrency with asyncio introduces asynchronous, parallel, and concurrent programming through hands-on Python examples. Hard-to-grok concurrency topics are broken down into simple flowcharts that make it easy to see how your tasks are running. You\u2019ll learn how to overcome the limitations of Python using asyncio to speed up slow web servers and microservices. You\u2019ll even combine asyncio with traditional multiprocessing techniques for huge improvements to performance. What's inside Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code About the reader For intermediate Python programmers. No previous experience of concurrency required. About the author Matthew Fowler has over 15 years of software engineering experience in roles from architect to engineering director. Table of Contents 1 Getting to know asyncio 2 asyncio basics 3 A first asyncio application 4 Concurrent web requests 5 Non-blocking database drivers 6 Handling CPU-bound work 7 Handling blocking work with threads 8 Streams 9 Web applications 10 Microservices 11 Synchronization 12 Asynchronous queues 13 Managing subprocesses 14 Advanced asyncio", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=M9xdEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=M9xdEAAAQBAJ&pg=PT410&dq=Python&hl=&cd=10&source=gbs_api"}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "description": "The professional programmer\u2019s Deitel\u00ae guide to Python\u00ae with introductory artificial intelligence case studies Written for programmers with a background in another high-level language, Python for Programmers uses hands-on instruction to teach today\u2019s most compelling, leading-edge computing technologies and programming in Python\u2013one of the world\u2019s most popular and fastest-growing languages. Please read the Table of Contents diagram inside the front cover and the Preface for more details. In the context of 500+, real-world examples ranging from individual snippets to 40 large scripts and full implementation case studies, you\u2019ll use the interactive IPython interpreter with code in Jupyter Notebooks to quickly master the latest Python coding idioms. After covering Python Chapters 1-5 and a few key parts of Chapters 6-7, you\u2019ll be able to handle significant portions of the hands-on introductory AI case studies in Chapters 11-16, which are loaded with cool, powerful, contemporary examples. These include natural language processing, data mining Twitter\u00ae for sentiment analysis, cognitive computing with IBM\u00ae WatsonTM, supervised machine learning with classification and regression, unsupervised machine learning with clustering, computer vision through deep learning and convolutional neural networks, deep learning with recurrent neural networks, big data with Hadoop\u00ae, SparkTM and NoSQL databases, the Internet of Things and more. You\u2019ll also work directly or indirectly with cloud-based services, including Twitter, Google TranslateTM, IBM Watson, Microsoft\u00ae Azure\u00ae, OpenMapQuest, PubNub and more. Features 500+ hands-on, real-world, live-code examples from snippets to case studies IPython + code in Jupyter\u00ae Notebooks Library-focused: Uses Python Standard Library and data science libraries to accomplish significant tasks with minimal code Rich Python coverage: Control statements, functions, strings, files, JSON serialization, CSV, exceptions Procedural, functional-style and object-oriented programming Collections: Lists, tuples, dictionaries, sets, NumPy arrays, pandas Series & DataFrames Static, dynamic and interactive visualizations Data experiences with real-world datasets and data sources Intro to Data Science sections: AI, basic stats, simulation, animation, random variables, data wrangling, regression AI, big data and cloud data science case studies: NLP, data mining Twitter\u00ae, IBM\u00ae WatsonTM, machine learning, deep learning, computer vision, Hadoop\u00ae, SparkTM, NoSQL, IoT Open-source libraries: NumPy, pandas, Matplotlib, Seaborn, Folium, SciPy, NLTK, TextBlob, spaCy, Textatistic, Tweepy, scikit-learn\u00ae, Keras and more Accompanying code examples are available here: http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/bookreg/9780135224335/9780135224335_examples.zip. Register your product for convenient access to downloads, updates, and/or corrections as they become available. See inside book for more information.", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=LauMDwAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=LauMDwAAQBAJ&q=Python&dq=Python&hl=&cd=15&source=gbs_api"}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Authors", "Type", "Categories", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "printType": "BOOK", "categories": ["Computers"]}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "printType": "BOOK", "categories": ["Computers"]}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Image link", "Description", "Book subtitle", "Average rate", "Ratings count", "Preview", "Authors", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "description": "Learn how to speed up slow Python code with concurrent programming and the cutting-edge asyncio library. Use coroutines and tasks alongside async/await syntax to run code concurrently Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code Python is flexible, versatile, and easy to learn. It can also be very slow compared to lower-level languages. Python Concurrency with asyncio teaches you how to boost Python's performance by applying a variety of concurrency techniques. You'll learn how the complex-but-powerful asyncio library can achieve concurrency with just a single thread and use asyncio's APIs to run multiple web requests and database queries simultaneously. The book covers using asyncio with the entire Python concurrency landscape, including multiprocessing and multithreading. About the technology It\u2019s easy to overload standard Python and watch your programs slow to a crawl. Th e asyncio library was built to solve these problems by making it easy to divide and schedule tasks. It seamlessly handles multiple operations concurrently, leading to apps that are lightning fast and scalable. About the book Python Concurrency with asyncio introduces asynchronous, parallel, and concurrent programming through hands-on Python examples. Hard-to-grok concurrency topics are broken down into simple flowcharts that make it easy to see how your tasks are running. You\u2019ll learn how to overcome the limitations of Python using asyncio to speed up slow web servers and microservices. You\u2019ll even combine asyncio with traditional multiprocessing techniques for huge improvements to performance. What's inside Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code About the reader For intermediate Python programmers. No previous experience of concurrency required. About the author Matthew Fowler has over 15 years of software engineering experience in roles from architect to engineering director. Table of Contents 1 Getting to know asyncio 2 asyncio basics 3 A first asyncio application 4 Concurrent web requests 5 Non-blocking database drivers 6 Handling CPU-bound work 7 Handling blocking work with threads 8 Streams 9 Web applications 10 Microservices 11 Synchronization 12 Asynchronous queues 13 Managing subprocesses 14 Advanced asyncio", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=M9xdEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=M9xdEAAAQBAJ&pg=PT410&dq=Python&hl=&cd=10&source=gbs_api"}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "description": "The professional programmer\u2019s Deitel\u00ae guide to Python\u00ae with introductory artificial intelligence case studies Written for programmers with a background in another high-level language, Python for Programmers uses hands-on instruction to teach today\u2019s most compelling, leading-edge computing technologies and programming in Python\u2013one of the world\u2019s most popular and fastest-growing languages. Please read the Table of Contents diagram inside the front cover and the Preface for more details. In the context of 500+, real-world examples ranging from individual snippets to 40 large scripts and full implementation case studies, you\u2019ll use the interactive IPython interpreter with code in Jupyter Notebooks to quickly master the latest Python coding idioms. After covering Python Chapters 1-5 and a few key parts of Chapters 6-7, you\u2019ll be able to handle significant portions of the hands-on introductory AI case studies in Chapters 11-16, which are loaded with cool, powerful, contemporary examples. These include natural language processing, data mining Twitter\u00ae for sentiment analysis, cognitive computing with IBM\u00ae WatsonTM, supervised machine learning with classification and regression, unsupervised machine learning with clustering, computer vision through deep learning and convolutional neural networks, deep learning with recurrent neural networks, big data with Hadoop\u00ae, SparkTM and NoSQL databases, the Internet of Things and more. You\u2019ll also work directly or indirectly with cloud-based services, including Twitter, Google TranslateTM, IBM Watson, Microsoft\u00ae Azure\u00ae, OpenMapQuest, PubNub and more. Features 500+ hands-on, real-world, live-code examples from snippets to case studies IPython + code in Jupyter\u00ae Notebooks Library-focused: Uses Python Standard Library and data science libraries to accomplish significant tasks with minimal code Rich Python coverage: Control statements, functions, strings, files, JSON serialization, CSV, exceptions Procedural, functional-style and object-oriented programming Collections: Lists, tuples, dictionaries, sets, NumPy arrays, pandas Series & DataFrames Static, dynamic and interactive visualizations Data experiences with real-world datasets and data sources Intro to Data Science sections: AI, basic stats, simulation, animation, random variables, data wrangling, regression AI, big data and cloud data science case studies: NLP, data mining Twitter\u00ae, IBM\u00ae WatsonTM, machine learning, deep learning, computer vision, Hadoop\u00ae, SparkTM, NoSQL, IoT Open-source libraries: NumPy, pandas, Matplotlib, Seaborn, Folium, SciPy, NLTK, TextBlob, spaCy, Textatistic, Tweepy, scikit-learn\u00ae, Keras and more Accompanying code examples are available here: http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/bookreg/9780135224335/9780135224335_examples.zip. Register your product for convenient access to downloads, updates, and/or corrections as they become available. See inside book for more information.", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=LauMDwAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=LauMDwAAQBAJ&q=Python&dq=Python&hl=&cd=15&source=gbs_api"}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Authors", "Type", "Categories", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "printType": "BOOK", "categories": ["Computers"]}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "printType": "BOOK", "categories": ["Computers"]}}]}}, {"query": "Python", "regex": "^201[7-9]|^202", "regex_field": "Publishing date", "fields": ["Book title", "Image link", "Description", "Book subtitle", "Average rate", "Ratings count", "Preview", "Authors", "Publishing date"], "results": {"items": [{"volumeInfo": {"title": "Python Concurrency with asyncio", "authors": ["Matthew Fowler"], "publishedDate": "2022-03-15", "description": "Learn how to speed up slow Python code with concurrent programming and the cutting-edge asyncio library. Use coroutines and tasks alongside async/await syntax to run code concurrently Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code Python is flexible, versatile, and easy to learn. It can also be very slow compared to lower-level languages. Python Concurrency with asyncio teaches you how to boost Python's performance by applying a variety of concurrency techniques. You'll learn how the complex-but-powerful asyncio library can achieve concurrency with just a single thread and use asyncio's APIs to run multiple web requests and database queries simultaneously. The book covers using asyncio with the entire Python concurrency landscape, including multiprocessing and multithreading. About the technology It\u2019s easy to overload standard Python and watch your programs slow to a crawl. Th e asyncio library was built to solve these problems by making it easy to divide and schedule tasks. It seamlessly handles multiple operations concurrently, leading to apps that are lightning fast and scalable. About the book Python Concurrency with asyncio introduces asynchronous, parallel, and concurrent programming through hands-on Python examples. Hard-to-grok concurrency topics are broken down into simple flowcharts that make it easy to see how your tasks are running. You\u2019ll learn how to overcome the limitations of Python using asyncio to speed up slow web servers and microservices. You\u2019ll even combine asyncio with traditional multiprocessing techniques for huge improvements to performance. What's inside Build web APIs and make concurrency web requests with aiohttp Run thousands of SQL queries concurrently Create a map-reduce job that can process gigabytes of data concurrently Use threading with asyncio to mix blocking code with asyncio code About the reader For intermediate Python programmers. No previous experience of concurrency required. About the author Matthew Fowler has over 15 years of software engineering experience in roles from architect to engineering director. Table of Contents 1 Getting to know asyncio 2 asyncio basics 3 A first asyncio application 4 Concurrent web requests 5 Non-blocking database drivers 6 Handling CPU-bound work 7 Handling blocking work with threads 8 Streams 9 Web applications 10 Microservices 11 Synchronization 12 Asynchronous queues 13 Managing subprocesses 14 Advanced asyncio", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=M9xdEAAAQBAJ&printsec=frontcover&img=1&zoom=1&edge=curl&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=M9xdEAAAQBAJ&pg=PT410&dq=Python&hl=&cd=10&source=gbs_api"}}, {"volumeInfo": {"title": "Python for Programmers", "authors": ["Paul Deitel", "Harvey Deitel"], "publishedDate": "2019-03-15", "description": "The professional programmer\u2019s Deitel\u00ae guide to Python\u00ae with introductory artificial intelligence case studies Written for programmers with a background in another high-level language, Python for Programmers uses hands-on instruction to teach today\u2019s most compelling, leading-edge computing technologies and programming in Python\u2013one of the world\u2019s most popular and fastest-growing languages. Please read the Table of Contents diagram inside the front cover and the Preface for more details. In the context of 500+, real-world examples ranging from individual snippets to 40 large scripts and full implementation case studies, you\u2019ll use the interactive IPython interpreter with code in Jupyter Notebooks to quickly master the latest Python coding idioms. After covering Python Chapters 1-5 and a few key parts of Chapters 6-7, you\u2019ll be able to handle significant portions of the hands-on introductory AI case studies in Chapters 11-16, which are loaded with cool, powerful, contemporary examples. These include natural language processing, data mining Twitter\u00ae for sentiment analysis, cognitive computing with IBM\u00ae WatsonTM, supervised machine learning with classification and regression, unsupervised machine learning with clustering, computer vision through deep learning and convolutional neural networks, deep learning with recurrent neural networks, big data with Hadoop\u00ae, SparkTM and NoSQL databases, the Internet of Things and more. You\u2019ll also work directly or indirectly with cloud-based services, including Twitter, Google TranslateTM, IBM Watson, Microsoft\u00ae Azure\u00ae, OpenMapQuest, PubNub and more. Features 500+ hands-on, real-world, live-code examples from snippets to case studies IPython + code in Jupyter\u00ae Notebooks Library-focused: Uses Python Standard Library and data science libraries to accomplish significant tasks with minimal code Rich Python coverage: Control statements, functions, strings, files, JSON serialization, CSV, exceptions Procedural, functional-style and object-oriented programming Collections: Lists, tuples, dictionaries, sets, NumPy arrays, pandas Series & DataFrames Static, dynamic and interactive visualizations Data experiences with real-world datasets and data sources Intro to Data Science sections: AI, basic stats, simulation, animation, random variables, data wrangling, regression AI, big data and cloud data science case studies: NLP, data mining Twitter\u00ae, IBM\u00ae WatsonTM, machine learning, deep learning, computer vision, Hadoop\u00ae, SparkTM, NoSQL, IoT Open-source libraries: NumPy, pandas, Matplotlib, Seaborn, Folium, SciPy, NLTK, TextBlob, spaCy, Textatistic, Tweepy, scikit-learn\u00ae, Keras and more Accompanying code examples are available here: http://ptgmedia.pearsoncmg.com/imprint_downloads/informit/bookreg/9780135224335/9780135224335_examples.zip. Register your product for convenient access to downloads, updates, and/or corrections as they become available. See inside book for more information.", "imageLinks": {"thumbnail": "http://books.google.com/books/content?id=LauMDwAAQBAJ&printsec=frontcover&img=1&zoom=1&source=gbs_api"}, "previewLink": "http://books.google.com.ua/books?id=LauMDwAAQBAJ&q=Python&dq=Python&hl=&cd=15&source=gbs_api"}}]}}]}